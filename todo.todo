Requisitos da aplicação:
✔ Usuários podem enviar dinheiro (efetuar transferência) para lojistas e entre usuários. @done(24-04-08 12:43)
✔ Lojistas só recebem transferências, não enviam dinheiro para ninguém. @done(24-04-08 15:39)
✔ Fazer 2 tipos de transações - de usuario para usuairo e de usuario para lojista. @done(24-04-08 12:43)
✔ Criar a logica para transferencia entre usuarios e entre usuario e lojista. @done(24-04-08 12:43)
✔ Validar se o usuário tem saldo antes da transferência. @done(24-04-06 19:59)
✔ Não permitir transferencia entre o mesmo usuario @done(24-04-08 15:48)
☐ Antes de finalizar a transferência, deve-se consultar um serviço autorizador externo, use este mock
- para simular (https://run.mocky.io/v3/5794d450-d2e2-4412-8131-73d0293ac1cc).
✔ A operação de transferência deve ser uma transação (ou seja, revertida em qualquer caso de inconsistência) @done(24-04-08 12:43)
✔ e o dinheiro deve voltar para a carteira do usuário que envia. @done(24-04-08 12:44)
☐ No recebimento de pagamento, o usuário ou lojista precisa receber notificação (envio de email, sms) enviada por um serviço de terceiro e
- eventualmente este serviço pode estar indisponível/instável. Use este mock para simular o envio (https://run.mocky.io/v3/54dc2cf1-3add-45b5-b5a9-6bf7e7f1f4a6).
✔ Este serviço deve ser RESTFul. @done(24-04-08 12:44)
☐ Usar o design partnner Strategy para a questão dos serviçoes de email
☐ Implementar os mocks
